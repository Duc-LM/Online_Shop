@model PagedList.IPagedList<Online_Shop.Models.DTO.ProductWithCheckSpec>
@using PagedList.Mvc
@{
    /**/

    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<style>
    .ul.pagination {
        display: inline-block;
        padding: 0;
        margin: 0;
    }

    div.pagination {
        display: flex;
        justify-content: center;
    }

    ul.pagination li {
        display: inline;
    }

        ul.pagination li a {
            color: black;
            float: left;
            padding: 8px 16px;
            text-decoration: none;
            transition: background-color .3s;
        }

        ul.pagination li.active {
            color: black;
            font-weight: bold;
            border: 1px solid;
            border-color: #80b3ff;
        }

    ul.pagination li {
        background-color: white;
        border-radius: 5px;
    }


        ul.pagination li a:hover:not(.active) {
            background-color: #ddd;
            border-radius: 5px;
        }
</style>


<div class="row">
    <div class="col-lg-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <button type="button" class="btn btn-inverse-primary ">
                    @Html.ActionLink("Create New Product", "Create", "Product")
                </button>
                <br />
                <br />

                <h2 class="card-title">Products:</h2>
                @using (Html.BeginForm())
                {
                    <p>
                        Title: @Html.TextBox("SearchString") <input type="submit" value="Search" />
                    </p>
                }
                @*<div class="form-group">
                        <div class="col-md-offset-2 col-md-10 text-success">
                            <h3 class=" text-success">@ViewData["Status"]</h3>
                        </div>
                    </div>*@
                <br />
                <div class="table-responsive">
                    <table class="table table-hover ">
                        <tr>
                            <th>
                                ID
                            </th>

                            <th>
                                Name
                            </th>
                            <th>
                                Images
                            </th>
                            <th>
                                Price
                            </th>
                            <th>
                                Quantity
                            </th>
                            <th>
                                Updated Date
                            </th>
                            <th>
                                Category
                            </th>
                            <th>Specification</th>
                            <th>Actions</th>
                            <th>Information</th>
                        </tr>

                        @foreach (var item in Model)
                        {

                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Product.Id)
                                </td>

                                <td>
                                    @Html.DisplayFor(modelItem => item.Product.Name)
                                </td>
                                <td>
                                    @{
                                        var InputFileName = item.Product.Images.Split(';')[0];
                                        var image = Path.Combine("/Include/Images/", InputFileName);
                                    }
                                    <img src="@image" width="200" height="200" />
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Product.Price)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Product.Quantity)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Product.Updated_at)
                                </td>
                                <td>
                                    @if (item.Product.Category != null)
                                    {@Html.DisplayFor(modelItem => item.Product.Category.Name)}
                                else
                                {
                                    <em><b>Not Set</b></em>
                                }
                                </td>
                                <td>
                                    @if (item.CheckSpec)
                                    {

                                        <button type="button" class="btn btn-inverse-primary ">
                                            @Html.ActionLink("Edit Specification", "Edit", "Spec", new { productId = item.Product.Id }, new { @Style = "display: inline" })
                                        </button>
                                        using (Html.BeginForm("Delete", "Spec", new { productId = item.Product.Id }, FormMethod.Post, new { @Style = "display: inline", onclick = "return confirm('Are you sure you wish to delete this Specification?');" }))
                                        {
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class=" btn btn-inverse-danger">Delete</button>
                                        }
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-inverse-success ">
                                            @Html.ActionLink("Add Specification", "Create", "Spec", new { productId = item.Product.Id }, new { @Style = "display: inline" })
                                        </button>
                                    }
                                </td>
                                <td>
                                    <button type="button" class="btn btn-inverse-primary ">
                                        @Html.ActionLink("Edit", "Edit", new { id = item.Product.Id }, new { @Style = "display: inline" })
                                    </button>

                                    @using (Html.BeginForm("Delete", "Product", new { id = item.Product.Id }, FormMethod.Post, new { @Style = "display: inline", onclick = "return confirm('Are you sure you wish to delete this product?');" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class=" btn btn-inverse-danger">Delete</button>
                                    }
                                </td>
                                <td>
                                    <button type="button" class="btn btn-inverse-primary ">
                                        @Html.ActionLink("Details", "Details", "Spec", new { productId = item.Product.Id }, new { @Style = "display: inline" })
                                    </button>
                                </td>
                            </tr>
                        }

                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="pagination">

    @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), new PagedListRenderOptions
                {
                         MaximumPageNumbersToDisplay = 5

                     })

</div>
