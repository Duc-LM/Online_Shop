@model Online_Shop.Models.DTO.ProductCategory

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-lg-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h2>Edit Product</h2>


                @using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">

                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Product.Id)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Product.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Product.Name, new { htmlAttributes = new { @class = "form-control" }, placeholder = "Enter Product Name" })
                                @Html.ValidationMessageFor(model => model.Product.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <dd>
                            @{
                                var InputFileName = Model.Product.Images.Split(';');
                                var list = new List<string>
                                    ();
                                for (int i = 0; i < InputFileName.Length - 1; i++)
                                {
                                    list.Add(Path.Combine("/Include/Images/", InputFileName[i]));
                                }
                            }
                            <div id="banner">
                                @foreach (string item in list)
                                {
                                    <div style="display : inline-block">
                                        <img src="@item" width="300" height="300">
                                    </div>
                                }

                            </div>
                        </dd>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Product.Images, htmlAttributes: new { @class = "control-label col-md-2" })

                            <div class="form-horizontal">

                                <div class="form-group">

                                    <div class="col-md-10">
                                        <input type="file" multiple name="files" id="Files" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10 text-danger">
                                        @ViewBag.UploadStatus
                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Product.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Product.Price, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Price" } })
                                @Html.ValidationMessageFor(model => model.Product.Price, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Product.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Product.Quantity, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Quantity" } })
                                @Html.ValidationMessageFor(model => model.Product.Quantity, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Product.Short_desc,"Short Description", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Product.Short_desc, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Short Description" } })
                                @Html.ValidationMessageFor(model => model.Product.Short_desc, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Product.Category_id, "Category", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.Product.Category_id, new SelectList(Model.Categories, "Id", "Name"), htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Product.Category_id, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class=" btn btn-inverse-primary" />
                            </div>
                        </div>
                    </div>
                }

                <div>
                    @Html.ActionLink("Back to List", "Index")
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
